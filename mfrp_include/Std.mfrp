material Std

type Maybe[a] = Just(a) | Nothing

type Tuple2[t0, t1] = Tuple2(t0, t1)
type Tuple3[t0, t1, t2] = Tuple3(t0, t1, t2)
type Tuple4[t0, t1, t2, t3] = Tuple4(t0, t1, t2, t3)
type Tuple5[t0, t1, t2, t3, t4] = Tuple5(t0, t1, t2, t3, t4)

type static Bool = False | True

primtype Int = c{ int }

primfunc + (a : Int, b : Int) : Int = c{ a + b }, ruby{ a + b }
primfunc * (a : Int, b : Int) : Int = c{ a * b }, ruby{ a * b }
primfunc - (a : Int, b : Int) : Int = c{ a - b }, ruby{ a - b }
primfunc < (a : Int, b : Int) : Bool = c{ a < b }, ruby{ a < b ? [:True] : [:False] }
primfunc @! (a : Bool) : Bool = c{ !a }, ruby{ a == [:True] ? [:False] : [:True] }

infixl 7 *
infixl 6 +
